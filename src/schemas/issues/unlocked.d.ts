import type {
  EnterpriseWebhooks, IssueType, OrganizationSimple, RepositoryWebhooks, SimpleInstallation, SimpleUser 
} from '../common/index.d.ts';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IssuesUnlockedEvent {
  action: 'unlocked';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null,
    assignee?: {
      avatar_url?: string,
      deleted?: boolean,
      email?: string | null,
      events_url?: string,
      followers_url?: string,
      following_url?: string,
      gists_url?: string,
      gravatar_id?: string,
      html_url?: string,
      id: number,
      login: string,
      name?: string,
      node_id?: string,
      organizations_url?: string,
      received_events_url?: string,
      repos_url?: string,
      site_admin?: boolean,
      starred_url?: string,
      subscriptions_url?: string,
      type?: 'Bot' | 'User' | 'Organization',
      url?: string,
      user_view_type?: string
    } | null,
    assignees: ({
      avatar_url?: string,
      deleted?: boolean,
      email?: string | null,
      events_url?: string,
      followers_url?: string,
      following_url?: string,
      gists_url?: string,
      gravatar_id?: string,
      html_url?: string,
      id: number,
      login: string,
      name?: string,
      node_id?: string,
      organizations_url?: string,
      received_events_url?: string,
      repos_url?: string,
      site_admin?: boolean,
      starred_url?: string,
      subscriptions_url?: string,
      type?: 'Bot' | 'User' | 'Organization',
      url?: string,
      user_view_type?: string
    } | null)[],
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER',
    body: string | null,
    closed_at: string | null,
    comments: number,
    comments_url: string,
    created_at: string,
    draft?: boolean,
    events_url: string,
    html_url: string,
    id: number,
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string,
      default: boolean,
      description: string | null,
      id: number,
      /**
       * The name of the label.
       */
      name: string,
      node_id: string,
      /**
       * URL for the label
       */
      url: string
    } | null)[],
    labels_url: string,
    locked: false,
    milestone: {
      closed_at: string | null,
      closed_issues: number,
      created_at: string,
      creator: {
        avatar_url?: string,
        deleted?: boolean,
        email?: string | null,
        events_url?: string,
        followers_url?: string,
        following_url?: string,
        gists_url?: string,
        gravatar_id?: string,
        html_url?: string,
        id: number,
        login: string,
        name?: string,
        node_id?: string,
        organizations_url?: string,
        received_events_url?: string,
        repos_url?: string,
        site_admin?: boolean,
        starred_url?: string,
        subscriptions_url?: string,
        type?: 'Bot' | 'User' | 'Organization',
        url?: string,
        user_view_type?: string
      } | null,
      description: string | null,
      due_on: string | null,
      html_url: string,
      id: number,
      labels_url: string,
      node_id: string,
      /**
       * The number of the milestone.
       */
      number: number,
      open_issues: number,
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed',
      updated_at: string,
      url: string
    } | null,
    node_id: string,
    number: number,
    performed_via_github_app?: {
      created_at: string | null,
      description: string | null,
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[],
      external_url: string | null,
      html_url: string,
      id: number | null,
      /**
       * The name of the GitHub app
       */
      name: string,
      node_id: string,
      owner: {
        avatar_url?: string,
        deleted?: boolean,
        email?: string | null,
        events_url?: string,
        followers_url?: string,
        following_url?: string,
        gists_url?: string,
        gravatar_id?: string,
        html_url?: string,
        id: number,
        login: string,
        name?: string,
        node_id?: string,
        organizations_url?: string,
        received_events_url?: string,
        repos_url?: string,
        site_admin?: boolean,
        starred_url?: string,
        subscriptions_url?: string,
        type?: 'Bot' | 'User' | 'Organization',
        url?: string,
        user_view_type?: string
      } | null,
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write',
        administration?: 'read' | 'write',
        checks?: 'read' | 'write',
        content_references?: 'read' | 'write',
        contents?: 'read' | 'write',
        deployments?: 'read' | 'write',
        discussions?: 'read' | 'write',
        emails?: 'read' | 'write',
        environments?: 'read' | 'write',
        issues?: 'read' | 'write',
        keys?: 'read' | 'write',
        members?: 'read' | 'write',
        metadata?: 'read' | 'write',
        organization_administration?: 'read' | 'write',
        organization_hooks?: 'read' | 'write',
        organization_packages?: 'read' | 'write',
        organization_plan?: 'read' | 'write',
        organization_projects?: 'read' | 'write',
        organization_secrets?: 'read' | 'write',
        organization_self_hosted_runners?: 'read' | 'write',
        organization_user_blocking?: 'read' | 'write',
        packages?: 'read' | 'write',
        pages?: 'read' | 'write',
        pull_requests?: 'read' | 'write',
        repository_hooks?: 'read' | 'write',
        repository_projects?: 'read' | 'write',
        secret_scanning_alerts?: 'read' | 'write',
        secrets?: 'read' | 'write',
        security_events?: 'read' | 'write',
        security_scanning_alert?: 'read' | 'write',
        single_file?: 'read' | 'write',
        statuses?: 'read' | 'write',
        team_discussions?: 'read' | 'write',
        vulnerability_alerts?: 'read' | 'write',
        workflows?: 'read' | 'write'
      },
      /**
       * The slug name of the GitHub app
       */
      slug?: string,
      updated_at: string | null
    } | null,
    pull_request?: {
      diff_url?: string,
      html_url?: string,
      merged_at?: string | null,
      patch_url?: string,
      url?: string
    },
    reactions: {
      '+1': number,
      '-1': number,
      confused: number,
      eyes: number,
      heart: number,
      hooray: number,
      laugh: number,
      rocket: number,
      total_count: number,
      url: string
    },
    repository_url: string,
    sub_issues_summary?: {
      total: number,
      completed: number,
      percent_completed: number
    },
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed',
    state_reason?: string | null,
    timeline_url?: string,
    type?: IssueType,
    updated_at: string,
    /**
     * URL for the issue
     */
    url: string,
    user: {
      avatar_url?: string,
      deleted?: boolean,
      email?: string | null,
      events_url?: string,
      followers_url?: string,
      following_url?: string,
      gists_url?: string,
      gravatar_id?: string,
      html_url?: string,
      id: number,
      login: string,
      name?: string,
      node_id?: string,
      organizations_url?: string,
      received_events_url?: string,
      repos_url?: string,
      site_admin?: boolean,
      starred_url?: string,
      subscriptions_url?: string,
      type?: 'Bot' | 'User' | 'Organization',
      url?: string,
      user_view_type?: string
    } | null
  };
  organization?: OrganizationSimple;
  repository: RepositoryWebhooks;
  sender: SimpleUser;
}
