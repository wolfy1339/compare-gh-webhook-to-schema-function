import type {
  OrganizationRulesetConditions, RepositoryRule, RepositoryRuleEnforcement, RepositoryRulesetBypassActor, RepositoryRulesetConditionsForRefNames 
} from './index.d.ts';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A set of rules to apply when specified conditions are met.
 */
export interface RepositoryRuleset {
  /**
   * The ID of the ruleset
   */
  id: number;
  /**
   * The name of the ruleset
   */
  name: string;
  /**
   * The target of the ruleset
   */
  target?: 'branch' | 'tag' | 'push' | 'repository';
  /**
   * The type of the source of the ruleset
   */
  source_type?: 'Repository' | 'Organization' | 'Enterprise';
  /**
   * The name of the source
   */
  source: string;
  enforcement: RepositoryRuleEnforcement;
  /**
   * The actors that can bypass the rules in this ruleset
   */
  bypass_actors?: RepositoryRulesetBypassActor[];
  /**
   * The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
  current_user_can_bypass?: 'always' | 'pull_requests_only' | 'never';
  node_id?: string;
  _links?: {
    self?: {
      /**
       * The URL of the ruleset
       */
      href?: string
    },
    html?: {
      /**
       * The html URL of the ruleset
       */
      href?: string
    } | null
  };
  conditions?:
    | (RepositoryRulesetConditionsForRefNames | OrganizationRulesetConditions)
    | null;
  rules?: RepositoryRule[];
  created_at?: string;
  updated_at?: string;
}
