import type {
  AlertCreatedAt, AlertHtmlUrl, AlertNumber, AlertUpdatedAt, AlertUrl, SecretScanningAlertResolutionWebhook, SimpleUser 
} from './index.d.ts';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SecretScanningAlertWebhook {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: null | AlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  resolution?: SecretScanningAlertResolutionWebhook;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: string | null;
  resolved_by?: null | SimpleUser;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /**
   * The token status as of the latest validity check.
   */
  validity?: 'active' | 'inactive' | 'unknown';
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: null | SimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypass_request_reviewer?: null | SimpleUser;
  /**
   * An optional comment when reviewing a push protection bypass.
   */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /**
   * An optional comment when requesting a push protection bypass.
   */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   */
  push_protection_bypass_request_html_url?: string | null;
  /**
   * Whether the detected secret was publicly leaked.
   */
  publicly_leaked?: boolean | null;
  /**
   * Whether the detected secret was found in multiple repositories in the same organization or business.
   */
  multi_repo?: boolean | null;
}
