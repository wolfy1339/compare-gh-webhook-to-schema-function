import type {
  EnterpriseWebhooks, OrganizationSimple, SimpleInstallation, SimpleUser, WebhooksTeam1 
} from '../common/index.d.ts';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface TeamEditedEvent {
  action: 'edited';
  /**
   * The changes to the team if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string
    },
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string
    },
    privacy?: {
      /**
       * The previous version of the team's privacy if the action was `edited`.
       */
      from: string
    },
    notification_setting?: {
      /**
       * The previous version of the team's notification setting if the action was `edited`.
       */
      from: string
    },
    repository?: {
      permissions: {
        from: {
          /**
           * The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
           */
          admin?: boolean,
          /**
           * The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
           */
          pull?: boolean,
          /**
           * The previous version of the team member's `push` permission on a repository, if the action was `edited`.
           */
          push?: boolean
        }
      }
    }
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean,
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean,
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean,
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean,
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
    archive_url: string,
    /**
     * Whether the repository is archived.
     */
    archived: boolean,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    clone_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
    contributors_url: string,
    created_at: number | string,
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [k: string]: unknown | undefined
    },
    /**
     * The default branch of the repository.
     */
    default_branch: string,
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean,
    deployments_url: string,
    description: string | null,
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean,
    downloads_url: string,
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
    forks_url: string,
    full_name: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url: string,
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean,
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean,
    has_pages: boolean,
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean,
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean,
    homepage: string | null,
    hooks_url: string,
    html_url: string,
    /**
     * Unique identifier of the repository
     */
    id: number,
    is_template?: boolean,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
    language: string | null,
    languages_url: string,
    license: {
      key: string,
      name: string,
      node_id: string,
      spdx_id: string,
      url: string | null
    } | null,
    master_branch?: string,
    merges_url: string,
    milestones_url: string,
    mirror_url: string | null,
    /**
     * The name of the repository.
     */
    name: string,
    node_id: string,
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
    owner: {
      avatar_url?: string,
      deleted?: boolean,
      email?: string | null,
      events_url?: string,
      followers_url?: string,
      following_url?: string,
      gists_url?: string,
      gravatar_id?: string,
      html_url?: string,
      id: number,
      login: string,
      name?: string,
      node_id?: string,
      organizations_url?: string,
      received_events_url?: string,
      repos_url?: string,
      site_admin?: boolean,
      starred_url?: string,
      subscriptions_url?: string,
      type?: 'Bot' | 'User' | 'Organization',
      url?: string,
      user_view_type?: string
    } | null,
    permissions?: {
      admin: boolean,
      maintain?: boolean,
      pull: boolean,
      push: boolean,
      triage?: boolean
    },
    /**
     * Whether the repository is private or public.
     */
    private: boolean,
    public?: boolean,
    pulls_url: string,
    pushed_at: number | string | null,
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
    stargazers_url: string,
    statuses_url: string,
    subscribers_url: string,
    subscription_url: string,
    svn_url: string,
    tags_url: string,
    teams_url: string,
    topics: string[],
    trees_url: string,
    updated_at: string,
    url: string,
    visibility: 'public' | 'private' | 'internal',
    watchers: number,
    watchers_count: number
  };
  sender: SimpleUser;
  team: WebhooksTeam1;
}
